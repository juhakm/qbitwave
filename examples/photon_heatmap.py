import numpy as np
import matplotlib.pyplot as plt
from qbitwave import QBitwave,  QBitwaveND
import matplotlib.animation as animation
import math
from numba import njit

from scipy.interpolate import RegularGridInterpolator

def rich_wavefunction_2d(Nx=100, Ny=100, sigma_x=8.0, sigma_y=12.0, 
                         kx=2.0, ky=1.5, x0=-10, y0=5, phase_offset=0.3*np.pi):
    """
    Asymmetric 2D Gaussian wavefunction with tilted phase and offset center.
    Useful for testing extrapolation outside the main support.
    """
    x = np.linspace(-Nx//2, Nx//2, Nx)
    y = np.linspace(-Ny//2, Ny//2, Ny)
    X, Y = np.meshgrid(x, y, indexing='ij')

    # Asymmetric Gaussian envelope with shifted center
    amplitude = np.exp(-((X - x0)**2 / (2 * sigma_x**2) + (Y - y0)**2 / (2 * sigma_y**2)))
    
    # Tilted complex phase: diagonal wave vector
    phase = np.exp(1j * (kx * X + ky * Y + phase_offset))
    
    psi = amplitude * phase
    return psi


# Photon wavefunction: 2D Gaussian slice
def photon_wavefunction_2d(Nx=100, Ny=100, sigma=10.0, k=1.0):
    x = np.linspace(-Nx//2, Nx//2, Nx)
    y = np.linspace(-Ny//2, Ny//2, Ny)
    X, Y = np.meshgrid(x, y, indexing='ij')
    amplitude = np.exp(-(X**2 + Y**2) / (2 * sigma**2))
    phase = np.exp(1j * k * 0)  # fixed z = 0
    psi = amplitude * phase
    return psi


def photon_wavefunction_2d_moving(Nx=100, Ny=100, sigma=10.0, kx=5.0, ky=0.0, x0=-20, y0=0):
    x = np.linspace(-Nx//2, Nx//2, Nx)
    y = np.linspace(-Ny//2, Ny//2, Ny)
    X, Y = np.meshgrid(x, y, indexing='ij')
    
    amplitude = np.exp(-((X - x0)**2 + (Y - y0)**2) / (2 * sigma**2))
    phase = np.exp(1j * (kx * X + ky * Y))  # Add directional momentum
    psi = amplitude * phase
    return psi


def photon_wavefunction_two_slits(Nx=100, Ny=100, slit_sep=20, slit_width=5, kx=5.0):
    x = np.linspace(-Nx//2, Nx//2, Nx)
    y = np.linspace(-Ny//2, Ny//2, Ny)
    X, Y = np.meshgrid(x, y, indexing='ij')

    # Two slits in Y direction
    slit1 = np.exp(-((Y - slit_sep/2)**2) / (2 * slit_width**2))
    slit2 = np.exp(-((Y + slit_sep/2)**2) / (2 * slit_width**2))
    slits = slit1 + slit2
    
    envelope = np.exp(-(X + 30)**2 / (2 * 20**2))  # wavefront left of slits
    phase = np.exp(1j * kx * X)

    psi = envelope * slits * phase
    return psi


def photon_wavefunction_plane_wave(Nx=100, Ny=100, kx=5.0, ky=2.0):
    x = np.linspace(-Nx//2, Nx//2, Nx)
    y = np.linspace(-Ny//2, Ny//2, Ny)
    X, Y = np.meshgrid(x, y, indexing='ij')
    
    psi = np.exp(1j * (kx * X + ky * Y))
    return psi


def complex_test_wavefunction(Nx=100, Ny=100):
    """
    Creates a rich, aperiodic, asymmetric wavefunction with:
    - multiple Gaussian peaks
    - phase vortices
    - directional interference
    - no symmetry
    """
    x = np.linspace(-Nx//2, Nx//2, Nx)
    y = np.linspace(-Ny//2, Ny//2, Ny)
    X, Y = np.meshgrid(x, y, indexing='ij')

    # Gaussian blobs
    g1 = np.exp(-((X + 15)**2 + (Y + 5)**2) / (2 * 6.0**2)) * np.exp(1j * (0.3 * X + 0.2 * Y))
    g2 = np.exp(-((X - 10)**2 + (Y - 10)**2) / (2 * 4.0**2)) * np.exp(1j * (1.2 * X - 0.8 * Y + np.pi/3))
    g3 = np.exp(-((X)**2 + (Y - 20)**2) / (2 * 5.0**2)) * np.exp(1j * (2.0 * np.arctan2(Y, X)))  # vortex

    # Sum them with complex weights
    psi = g1 + 0.7 * g2 + 0.5j * g3

    return psi


def bleeding_wavefunction(Nx=100, Ny=100):
    """
    A non-symmetric wavefunction whose amplitude bleeds to the boundaries
    and contains multiple interfering components.
    """
    x = np.linspace(-Nx//2, Nx//2, Nx)
    y = np.linspace(-Ny//2, Ny//2, Ny)
    X, Y = np.meshgrid(x, y, indexing='ij')

    # Gaussian 1: bottom left
    g1 = np.exp(-((X + 30)**2 + (Y + 30)**2) / (2 * 12**2)) * np.exp(1j * (0.5 * X - 0.2 * Y))

    # Gaussian 2: top right, higher frequency
    g2 = np.exp(-((X - 20)**2 + (Y - 20)**2) / (2 * 10**2)) * np.exp(1j * (1.8 * X + 1.0 * Y + np.pi/4))

    # Gaussian 3: close to center, vortex
    R = np.sqrt(X**2 + Y**2) + 1e-6
    theta = np.arctan2(Y, X)
    g3 = np.exp(-(R**2) / (2 * 20**2)) * np.exp(1j * theta * 2)

    # Weighted sum
    psi = 1.0 * g1 + 0.8 * g2 + 0.6j * g3

    return psi


def bleeding_wavefunction_with_edge_amplitudes(Nx=100, Ny=100):
    """
    Wavefunction with large, off-center Gaussians that bleed into edges.
    Produces meaningful extrapolation beyond [0,1].
    """
    x = np.linspace(-Nx//2, Nx//2, Nx)
    y = np.linspace(-Ny//2, Ny//2, Ny)
    X, Y = np.meshgrid(x, y, indexing='ij')

    # Large Gaussian centered near the bottom-left corner
    g1 = np.exp(-((X + 40)**2 + (Y + 40)**2) / (2 * 30**2)) * np.exp(1j * (0.8 * X - 0.2 * Y))

    # Large Gaussian overlapping the top and right edges
    g2 = np.exp(-((X - 40)**2 + (Y - 40)**2) / (2 * 28**2)) * np.exp(1j * (1.2 * X + 0.5 * Y + np.pi / 3))

    # Rotational component centered (optional)
    R = np.sqrt(X**2 + Y**2) + 1e-6
    theta = np.arctan2(Y, X)
    g3 = np.exp(-R**2 / (2 * 50**2)) * np.exp(1j * 2 * theta)

    # Combine them
    psi = 1.0 * g1 + 0.9 * g2 + 0.5j * g3

    return psi


#psi = photon_wavefunction_2d(Nx=100, Ny=100, sigma=10.0, k=1.0)
#psi = photon_wavefunction_2d_moving(Nx=100, Ny=100, sigma=10.0)
#psi = photon_wavefunction_two_slits(Nx=100, Ny=100)
#psi =  photon_wavefunction_plane_wave(Nx=100, Ny=100, kx=5.0, ky=2.0)
#psi = rich_wavefunction_2d(Nx=100, Ny=100)
#psi = complex_test_wavefunction()
#psi = bleeding_wavefunction()
psi =  bleeding_wavefunction_with_edge_amplitudes(Nx=100, Ny=100)


# Visualize probability density
plt.imshow(np.abs(psi)**2, cmap='inferno')
plt.title("Photon Probability Density |ψ(x,y)|²")
plt.colorbar()
plt.show()




#photon_bitstring
#q = QBitwaveND(photon_bitstring, shape=(0, 0), fixed_basis_size=64 )

photon = QBitwaveND.from_array(psi)
#photon.normalize()

#print("Total bitstring length:", len(photon_bitstring))
#print("Selected basis size:", photon.fixed_basis_size)
#print("Number of amplitudes:", len(photon.amplitudes))
#print("Amplitude shape:", photon.amplitudes.shape)


# Evaluate complex amplitude at center
print("ψ(0.5, 0.5) =", photon.evaluate(0.5, 0.5))
print("|ψ|² =", abs(photon.evaluate(0.5, 0.5))**2)

# debug out a few amplitudes 
for x, y in [ (0.5, 0.5), (0.25, 0.75), (1.1, -0.1) ]:
    a = photon.evaluate(x, y)
    print(f"ψ({x:.2f},{y:.2f}) = {a} → |ψ|² = {abs(a)**2}")


def unitary_evolution(photon : QBitwaveND):
    # Parameters
    time_start = 0.0
    time_end = 1.0
    time_step = 0.1

    # Evaluation grid: from -0.1 to 1.1 (extrapolating beyond [0,1])
    x_vals = np.linspace(-50, 150, 100)
    y_vals = np.linspace(-50, 150, 100)
    X, Y = np.meshgrid(x_vals, y_vals)

    for t in np.arange(time_start, time_end, time_step):
        Z = np.empty_like(X, dtype=np.float64)  # to hold probability amplitudes
        coeffs = photon.time_evolve_coeffs(t)
        for i in range(X.shape[0]):
            for j in range(X.shape[1]):
                Z[i, j] = photon.probability(X[i,j], Y[i,j], t=t, coeffs=coeffs)

        plt.clf()
        plt.imshow(Z, extent=(-0.1, 1.1, -0.1, 1.1), origin='lower', cmap='inferno')
        plt.title(f"Photon Probability Amplitude |ψ(x,y)|² at t={t:.2f}")
        plt.colorbar()
        plt.pause(0.1)  # short pause to update plot

    plt.show()
    print("Done")

    

if __name__ == "__main__":
    unitary_evolution(photon)
